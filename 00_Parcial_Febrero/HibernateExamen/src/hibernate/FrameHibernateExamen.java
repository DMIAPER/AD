/**
 * JFrame principal para realizar las busquedas de los libros
 * 
 * En esta clase se construira la ventana que contendrá dos campos donde se indicarán 
 * el ISBN del libro y el otro para los caracteres que debe contener el libro.
 * 
 * Existirá un botón que llamará al método para buscar por ISBN
 * 
 * En el segundo campo cuando se presione una tecla y exista algún libro que contenga 
 * el caracter introducido se mostrará una lista con todos los libros que nos devuelva 
 * la busquda. En caso que no exista ningún registro con los datos indicados se mostrará un
 * mensaje. 
 * 
 * Ambos campos puede contener información, ya que no afecta la busqueda al presionar el botón 
 * de buscar. 
 * 
 * @author DMIAPER (Diógens Miaja Pérez)
 * 
 * Fecha 28/02/2025
 * Versión 1.0.0
 * 
 */ 


package hibernate;

import Modelos.Libros;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.util.List;
import javax.swing.GroupLayout;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JScrollPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;

public class FrameHibernateExamen extends javax.swing.JFrame {
     private static CrudHibernate crud = new CrudHibernate();
     private JTable jtabDatos;
     private JScrollPane jscPanel;
   
    /**
     * Creates new form FrameHibernateDiogenes
     */
    public FrameHibernateExamen() {
        initComponents();
        //Se inicia el método para poder cerrar la app con nuestro método
        cerrarX();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jbBuscar = new javax.swing.JButton();
        jlISBN = new javax.swing.JLabel();
        jlTitulo = new javax.swing.JLabel();
        jtISBN = new javax.swing.JTextField();
        jtTitulo = new javax.swing.JTextField();
        jlMensajes = new javax.swing.JLabel();
        jbCerrar = new javax.swing.JButton();
        jlListTit = new javax.swing.JLabel();
        jpTabla = new javax.swing.JPanel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));

        jbBuscar.setText("Buscar Libros");
        jbBuscar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbBuscarActionPerformed(evt);
            }
        });

        jlISBN.setText("ISBN:");

        jlTitulo.setText("Título:");

        jtTitulo.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jtTituloKeyReleased(evt);
            }
        });

        jlMensajes.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jlMensajes.setForeground(new java.awt.Color(255, 0, 0));
        jlMensajes.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        jbCerrar.setFont(new java.awt.Font("Tahoma", 2, 18)); // NOI18N
        jbCerrar.setForeground(new java.awt.Color(255, 0, 0));
        jbCerrar.setText("CERRAR");
        jbCerrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbCerrarActionPerformed(evt);
            }
        });

        jlListTit.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        jlListTit.setText("LISTADO DE LIBROS");

        jpTabla.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        javax.swing.GroupLayout jpTablaLayout = new javax.swing.GroupLayout(jpTabla);
        jpTabla.setLayout(jpTablaLayout);
        jpTablaLayout.setHorizontalGroup(
            jpTablaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 1263, Short.MAX_VALUE)
        );
        jpTablaLayout.setVerticalGroup(
            jpTablaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 526, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(54, 54, 54)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jlISBN)
                    .addComponent(jlTitulo))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jtISBN, javax.swing.GroupLayout.DEFAULT_SIZE, 453, Short.MAX_VALUE)
                    .addComponent(jtTitulo))
                .addGap(18, 18, 18)
                .addComponent(jbBuscar, javax.swing.GroupLayout.PREFERRED_SIZE, 191, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(jlListTit)
                                .addGap(504, 504, 504))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(jlMensajes, javax.swing.GroupLayout.PREFERRED_SIZE, 1182, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(54, 54, 54))))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jpTabla, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 16, Short.MAX_VALUE))))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jbCerrar, javax.swing.GroupLayout.PREFERRED_SIZE, 114, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(539, 539, 539))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jlListTit)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jlISBN)
                    .addComponent(jtISBN, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jbBuscar, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jlTitulo)
                    .addComponent(jtTitulo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jpTabla, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jlMensajes, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jbCerrar, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(17, 17, 17))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Método para cerrar la aplicación desde el botón X del JFrame
     */
    public void cerrarX(){
        //Se capturan los errores para el método
        try{
            //se configura el biotón x sin función
            this.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);
            //Se añade evento listener para cuando se presiono el bóton se realice
            // una tarea
            addWindowListener(new WindowAdapter(){
                //Se llama al método windowClosing
                public void windowClosing(WindowEvent e){
                    //Se llama al método cerrarApp() que se ha desarrollo
                    cerrarApp();
                }
            });
        }catch(Exception e){
            System.err.println("Se ha producido un error: "+e);
        }
    }
    
    //Cuando se presione el botón cerrar de la aplicación 
    private void jbCerrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbCerrarActionPerformed
        //Se llama al método cerrarApp() que se ha desarrollo
        cerrarApp();
    }//GEN-LAST:event_jbCerrarActionPerformed

    /**
     * Métdo para cerrar la aplicación
     */
    public void cerrarApp(){
        int confirmacion = JOptionPane.showConfirmDialog(this, "¿Deseas cerrar la aplicación?", "Advertencia", JOptionPane.YES_OPTION);
        if(confirmacion == JOptionPane.YES_OPTION){
            //Se finaliza la sesión
            crud.finalizarSesion();
            //Se finaliza la aplicación
            System.exit(0);
        }
    }
    
    /**
     * Método para realizar las busquedas tras pulsar el botón Buscar
     * @param evt actionListener
     */
    private void jbBuscarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbBuscarActionPerformed
        //Se establece el jlabel en vacío
        jlMensajes.setText("");        
        //Se obtiene el jtCodigo como parámetro String
        String isbn = jtISBN.getText();
        //Se comprueba que el campo jtISBN no este vacío.
        if(!isbn.isEmpty()||!isbn.equals("")){
            //Se comprueba que el ISBN es valido
            //La expresión usada comprueba ISBN10 y ISBN13
            if(isbn.matches("^(\\d{9}[0-9X])$|(^97[89]\\d{10}$)")){
                //Si es un valor válido
                //Se llama al método que busca y muestra el libro por su ISBN.
                mostrarPorISBN(isbn);
            }else{
                jlMensajes.setText("El número introducido no contiene un ISBN correcto.");
            }
         
        }else{
            //Si ambos campos contienen información se mostrará un mensaje indicando 
            //que solo se puede realizar una busqueda con un campo.
            jlMensajes.setText("El campo ISBN debe contener un ISBN válido.");
            //Se borra la tabla si esta pintada
            borrarTabla();
        }
        
    }//GEN-LAST:event_jbBuscarActionPerformed

    /**
     * Método de escucha para cuando se suelte el teclado en el campo Titulo
     * realice la busqueda  de los libros con los parámetros indicados.
     * @param evt 
     */
    private void jtTituloKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jtTituloKeyReleased
        //Se borra el mensjae de error
        jlMensajes.setText("");
        //Obtenemos el texto contenga el campo título
        String caracter = jtTitulo.getText();
        if(caracter.isEmpty() || caracter.equals(" ")){
            //Se muestra un mensaje en el jlMensajes que muestra los mensajes de advertencia
            jlMensajes.setText("Debe introducir algún caracter.");
        }else{
            //Se borra el mensjae de error
            jlMensajes.setText("");
            //Se llama al método para que nos muestre la busqueda.
            mostrarLista(caracter);
        }
    }//GEN-LAST:event_jtTituloKeyReleased

    
    
    /**
     * Método para mostrar el libro por el ISBN 
     * @param isbn se recibe un String con el ISBN del libro a buscar
     */
    public void mostrarPorISBN(String isbn){
        // Se instancia el objeto que contendrá el modelo de la tabla creada
        DefaultTableModel modelo;
        //Se instancia un objeto de la clase Libros y se obtiene el libro que contenga el ISBN indicado
        List<Libros> libro = crud.obtenerLibro(isbn);
        //Si el objeto no recibe ningún libro
        if(libro == null){
            //Se muestra un mensaje en el jlMensajes que muestra los mensajes de advertencia
            jlMensajes.setText("No se ha encontrado ningún libro con el ISBN introducido");
            //Se borra la tabla si esta pintada
            borrarTabla();
        }else{
           //Si recibe información
           //Se obtiene el modelo de tabla 
           modelo = crearTabla();
           //Se llama al método para mostrar el lilbro en la tabla
           mostrarLibros(modelo, libro);
        }        
    }
    
    /**
     * Método para buscar por caracteres y mostrar todos los registros que contengan esos caracteres
     * @param caracter se obtiene un string con el valior de la busqueda
     */
    public void mostrarLista(String caracter){
        // Se instancia el objeto que contendrá el modelo de la tabla creada
        DefaultTableModel modelo;
        //Se instancia una lista de la clase Libros y recibe una lista con los datos obtenidos de la consulta
        List<Libros> listaLibros = crud.listaLibros(caracter);
        //Si el objeto esta vacío
        if(listaLibros.isEmpty()){
            //Se muestra un mensaje en el jlabel de los mensajes erroreos
            jlMensajes.setText("No se ha encontrado ningún libro con los caracteres indicados.");
            //Se borra la tabla si esta pintada
            borrarTabla();
        }else{
            //Si contiene información
            //Se crea la tabla
            modelo = crearTabla();
            //Se llama a la función para mostar los datos
            mostrarLibros(modelo, listaLibros);
        }
    }
    
    /**
     * Métedo que construye la tabla
     * @return devuelve el modelo de tabla
     */
    public DefaultTableModel crearTabla(){
        //Se crea un modelo de tabla
        DefaultTableModel modelo = new DefaultTableModel();     
        //Se indican los nombrers de las columnas
        String[] columnas = {"ISBN", "Título", "Autor", "Género", "Fecha publicación", "Precio", "Stock"};
        //Se añaden los nombres de las columnas a la tabla
        modelo.setColumnIdentifiers(columnas);
        // Si la tabla existe o el jScrollPane tiene contenido
        if(jtabDatos != null || jscPanel !=null){
            //Se elimina la tabla
            jpTabla.remove(jscPanel);
        }
        
        //Se crean los objetos JScrollPane y JTable
        jscPanel = new JScrollPane();
        jtabDatos = new JTable(modelo);    
        //Se agrega al jpscroll la tabla
        jscPanel.setViewportView(jtabDatos);
        //Se crea un grupo para el jpanel
        GroupLayout jpTablaLayout = new GroupLayout(jpTabla);
        //Se añade el grupo sl jpale que contendrá el scroolpane y la tabla
        jpTabla.setLayout(jpTablaLayout);
        
        //Se añade el componente JScrollPane con ancho
        jpTablaLayout.setHorizontalGroup(
            jpTablaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jscPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 1267, Short.MAX_VALUE)
        );
        
        //Se añade el componente JScrollPane con alto
        jpTablaLayout.setVerticalGroup(
            jpTablaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jscPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 526, Short.MAX_VALUE)
        );
        //se devuelve el modelo        
        return modelo;
    }
    
    /**
     * Método para añadir los medicamentos a la tabla
     * @param modelo se recibe un DefaultTableModel, que obtedrá el modelo de la tabla donde se mostrarán los libros.
     * @param libros se recibe un lista con los libros obtenidos.
     */
    public void mostrarLibros(DefaultTableModel modelo, List<Libros> libros){
        /**
         *  Se contruye un objeto nueva fila
         *  se obtendrán los campos por cada celda
         */
        
        //Bucle que se recorre para mostar los libros por filas en la columna
        for(Libros libro : libros){
            //e llama al método para crear la filas con los datos recebidos de la consulta
            Object[] nuevaFila = {
                libro.getIsbn(), 
                libro.getTitulo(),
                libro.getAutores().getAutor(),
                libro.getGenero().getGenero(),
                libro.getFechaPublicacion(),
                libro.getPrecioUnidad(),
                libro.getStock()
            };
             //Se añade la fila a la tabla
            modelo.addRow(nuevaFila);
        }  
    }
    
    //Método para quitar la tabla si no se encuentra los registros o no se cumple con las condiciones
    public void borrarTabla(){
        // Si la tabla existe o el jScrollPane tiene contenido
        if(jtabDatos != null || jscPanel !=null){
            //Se elimina la tabla
            jpTabla.remove(jscPanel);
            
            //Se pinta el panel sin la tabla
            javax.swing.GroupLayout jpTablaLayout = new javax.swing.GroupLayout(jpTabla);
            jpTabla.setLayout(jpTablaLayout);
            jpTablaLayout.setHorizontalGroup(
                jpTablaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGap(0, 736, Short.MAX_VALUE)
            );
            jpTablaLayout.setVerticalGroup(
                jpTablaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGap(0, 526, Short.MAX_VALUE)
            );
        }
    }
    
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FrameHibernateExamen.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FrameHibernateExamen.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FrameHibernateExamen.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FrameHibernateExamen.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new FrameHibernateExamen().setVisible(true);
            }
        });
        //Se inicia la sesión para realizar las consultas
        crud.inicioSesion();
        
    }

    
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jbBuscar;
    private javax.swing.JButton jbCerrar;
    private javax.swing.JLabel jlISBN;
    private javax.swing.JLabel jlListTit;
    private javax.swing.JLabel jlMensajes;
    private javax.swing.JLabel jlTitulo;
    private javax.swing.JPanel jpTabla;
    private javax.swing.JTextField jtISBN;
    private javax.swing.JTextField jtTitulo;
    // End of variables declaration//GEN-END:variables
}
